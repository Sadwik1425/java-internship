import java.sql.*;

public class JdbcExample {
    public static void main(String[] args) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            // 1. Load JDBC Driver (for H2 or MySQL)
            // For H2: org.h2.Driver
            // For MySQL: com.mysql.cj.jdbc.Driver
            Class.forName("org.h2.Driver");

            // 2. Connect to Database (H2 in-memory DB)
            conn = DriverManager.getConnection("jdbc:h2:mem:testdb", "sa", "");

            // 3. Create users table
            stmt = conn.createStatement();
            String createTable = "CREATE TABLE users (" +
                    "id INT AUTO_INCREMENT PRIMARY KEY, " +
                    "name VARCHAR(100), " +
                    "email VARCHAR(100))";
            stmt.execute(createTable);

            // 4. Insert data using PreparedStatement
            String insertSql = "INSERT INTO users(name, email) VALUES(?, ?)";
            pstmt = conn.prepareStatement(insertSql);
            pstmt.setString(1, "Alice");
            pstmt.setString(2, "alice@example.com");
            pstmt.executeUpdate();

            pstmt.setString(1, "Bob");
            pstmt.setString(2, "bob@example.com");
            pstmt.executeUpdate();

            // 5. Fetch and display data
            rs = stmt.executeQuery("SELECT * FROM users");
            while (rs.next()) {
                System.out.println(rs.getInt("id") + " | " +
                                   rs.getString("name") + " | " +
                                   rs.getString("email"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // 6. Close resources
            try { if (rs != null) rs.close(); } catch (Exception e) {}
            try { if (pstmt != null) pstmt.close(); } catch (Exception e) {}
            try { if (stmt != null) stmt.close(); } catch (Exception e) {}
            try { if (conn != null) conn.close(); } catch (Exception e) {}
        }
    }
}

   Interview questions
   1.JDBC is a Java API to connect and interact with databases.
   2.Use DriverManager.getConnection() with JDBC URL.
   3.PreparedStatement is a precompiled SQL query used for safety and efficiency.
   4.Statement executes static SQL; PreparedStatement executes parameterized SQL.
   5.SQL injection is malicious query insertion; prevent it using PreparedStatement.
   6.Use executeQuery() for SELECT and executeUpdate() for DML.
   7.ResultSet holds query results and allows row-wise traversal.
   8.Handle exceptions with try-catch, usually catching SQLException.
   9.Close ResultSet, Statement, and Connection in finally or try-with-resources.
   10.No, JDBC requires a database driver.
 
