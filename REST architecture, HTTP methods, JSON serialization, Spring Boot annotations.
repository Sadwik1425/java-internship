// DemoApplication.java
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

// Task.java (Model)
package com.example.demo.model;

import jakarta.persistence.*;

@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String description;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
}

// TaskRepository.java
package com.example.demo.repository;

import com.example.demo.model.Task;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TaskRepository extends JpaRepository<Task, Long> { }

// TaskController.java
package com.example.demo.controller;

import com.example.demo.model.Task;
import com.example.demo.repository.TaskRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/tasks")
public class TaskController {

    private final TaskRepository repository;

    public TaskController(TaskRepository repository) {
        this.repository = repository;
    }

    @PostMapping
    public Task createTask(@RequestBody Task task) {
        return repository.save(task);
    }

    @GetMapping
    public List<Task> getAllTasks() {
        return repository.findAll();
    }

    @GetMapping("/{id}")
    public Task getTaskById(@PathVariable Long id) {
        return repository.findById(id).orElse(null);
    }

    @PutMapping("/{id}")
    public Task updateTask(@PathVariable Long id, @RequestBody Task taskDetails) {
        return repository.findById(id).map(task -> {
            task.setTitle(taskDetails.getTitle());
            task.setDescription(taskDetails.getDescription());
            return repository.save(task);
        }).orElse(null);
    }

    @DeleteMapping("/{id}")
    public String deleteTask(@PathVariable Long id) {
        repository.deleteById(id);
        return "Task deleted successfully!";
    }
}

           Interview questions
          1.REST API – A way to build web services using HTTP for communication between client and server.
          2.HTTP methods – GET, POST, PUT, DELETE, PATCH.
          3.@RestController vs @Controller – @RestController returns JSON/XML directly, while @Controller returns a view (HTML/JSP).
          4.Spring Boot simplifies REST – By providing auto-configuration, embedded server, and easy annotations for endpoints.
          5.JSON serialization – Converting Java objects into JSON format.
          6.Testing REST APIs – Using Postman, curl, JUnit, or Spring’s MockMvc.
          7.@RequestBody / @ResponseBody – @RequestBody maps JSON → Java object, @ResponseBody maps Java object → JSON.
          8.Default JSON converter – Jackson (ObjectMapper).
          9.H2 Database – Lightweight in-memory database, used for fast testing in Spring Boot.
          10.Error handling – Using @ExceptionHandler, @ControllerAdvice, or Spring’s ResponseEntity.
